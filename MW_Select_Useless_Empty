import bpy

# 1. 현재 씬의 모든 오브젝트의 선택 상태를 해제합니다.
bpy.ops.object.select_all(action='DESELECT')

# 2. 조건을 만족하는 (선택할) 오브젝트를 저장할 리스트를 초기화합니다.
empty_to_select = []

# 3. 씬의 모든 오브젝트를 반복하며 확인합니다.
for obj in bpy.context.scene.objects:
    
    # 3.1. 기본 조건 확인: Empty 타입이면서 자식이 없는가?
    is_empty = (obj.type == 'EMPTY')
    has_no_children = (len(obj.children) == 0)
    
    if is_empty and has_no_children:
        
        # 3.2. 예외 조건 확인: 다른 오브젝트의 제약 조건에 연결되어 있는가?
        is_constraint_target = False
        
        # 씬의 모든 다른 오브젝트를 다시 반복합니다.
        for other_obj in bpy.context.scene.objects:
            
            # 제약 조건이 있는지 확인하고, 있다면 반복합니다.
            if other_obj.constraints:
                for constraint in other_obj.constraints:
                    
                    # 'target' 속성을 가진 제약 조건인지 확인합니다.
                    if hasattr(constraint, 'target') and constraint.target == obj:
                        is_constraint_target = True
                        break # 이 제약 조건만 확인되면 바로 탈출
                
            if is_constraint_target:
                break # 이 오브젝트가 연결되어 있음을 확인했으니 바로 탈출
        
        # 3.3. 최종 조건 검사: 기본 조건은 만족하고, 제약 조건 타겟이 아닌 경우에만 선택
        if not is_constraint_target:
            empty_to_select.append(obj)

# 4. 조건을 만족하는 오브젝트들을 선택하고 활성화합니다.
for obj in empty_to_select:
    obj.select_set(True)

# 5. 선택된 오브젝트 중 하나를 액티브 오브젝트로 설정합니다.
if empty_to_select:
    bpy.context.view_layer.objects.active = empty_to_select[0]
    print(f"INFO: {len(empty_to_select)}개의 Empty 오브젝트가 선택되었습니다 (자식 및 제약 조건 연결 없음).")
else:
    print("INFO: 조건을 만족하는 Empty 오브젝트가 없습니다.")